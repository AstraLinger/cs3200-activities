-------------------------------------------------------------
-- cs3200 Database design
-- https://github.com/northeastern-datalab/cs3200/
-------------------------------------------------------------


-------------------------
-- Drop tables if they already exist
-------------------------

DROP TABLE IF EXISTS M;
DROP TABLE IF EXISTS N;
DROP TABLE IF EXISTS L;

DROP TABLE IF EXISTS R;
DROP TABLE IF EXISTS S;
DROP TABLE IF EXISTS T;


---------------------------
-- Create the tables
---------------------------

create table M ( 
	A int); 

create table N ( 
	A int); 

create table L ( 
	A int); 
	
	
create table R ( 
	A int,
	B int); 

create table S ( 
	B int,
	C int); 

create table T ( 
	A int,
	C int); 


--------------------------- 
-- Populate the tables 
---------------------------

insert into M values (1); 
insert into M values (2); 

insert into N values (2); 
insert into N values (3); 

insert into L values (1); 
insert into L values (3); 


insert into R values (1, 2); 

insert into S values (2, 3); 

insert into T values (4, 5); 



---------------------------
-- Illustrating queries
-- Notice that Q1 (union) = Q4 (outer join with coalesce)
---------------------------

-- Q1
SELECT M.A, N.A, L.A
FROM (M full join N
on M.A = N.A)
full join L
on M.A = L.A;


-- Q2
SELECT M.A, N.A, L.A
FROM M full join L
on M.A = L.A
full join N
on M.A = N.A;





---------------------------
-- Illustrating queries
-- Notice that Q1 (union) = Q4 (outer join with coalesce)
---------------------------

-- Q1
SELECT a, b, c
FROM (R
natural full join 
S)
natural full join 
T;


-- Q2
SELECT a, b, c
FROM R
natural full join 
(S
natural full join 
T);















-------------------------
-- Drop tables if they already exist
-------------------------

DROP TABLE IF EXISTS R;
DROP TABLE IF EXISTS S;
DROP TABLE IF EXISTS T;


---------------------------
-- Create the tables
---------------------------

create table R ( 
	A int,
	B int); 

create table S ( 
	B int,
	C int); 

create table T ( 
	C int,
	A int); 


--------------------------- 
-- Populate the tables 
---------------------------

insert into R values (1, 2); 
insert into R values (1, 3); 

insert into S values (2, 3); 
insert into S values (4, 5); 



---------------------------
-- Illustrating queries
-- Notice that Q1 (union) = Q4 (outer join with coalesce)
---------------------------

-- Q1
SELECT A, B, C
FROM R
natural full join S;


-- Q2
SELECT *
FROM R
full join 
S
on R.B=S.B;

-- Q3: coalesce = natural join
SELECT A, coalesce(R.B, S.B), C
FROM R
full join 
S
on R.B=S.B;








-------------------------
-- Drop tables if they already exist
-------------------------

DROP TABLE IF EXISTS R;
DROP TABLE IF EXISTS S;
DROP TABLE IF EXISTS T;


---------------------------
-- Create the tables
---------------------------

create table R ( 
	A int); 

create table S ( 
	A int); 

create table T ( 
	A int); 


--------------------------- 
-- Populate the tables 
---------------------------

insert into R values (1); 
insert into R values (2); 

insert into S values (2); 
insert into S values (3); 

insert into T values (3); 
insert into T values (1); 


---------------------------
-- Illustrating queries
-- Notice even with one attribute, join order matters for outer join
-- natural join (same as coalesce) solves the problem
---------------------------

-- Q1 
SELECT R.A, S.A, T.A
FROM (R
full join S on R.A = S.A)
full join T on R.A = T.A;


-- Q2
SELECT R.A, S.A, T.A
FROM (R
full join S on R.A = S.A)
full join T on S.A = T.A;


-- Q2
SELECT *
FROM (R
natural full join S)
natural full join T;


-- Q2
select coalesce(X.A, T.A)
from(
	SELECT coalesce(R.A, S.A) A
	FROM (R
	full join S on R.A = S.A)
	)as X
full join T on X.A = T.A;




